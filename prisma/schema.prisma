// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  UserRole  UserRole[]

  @@index([name])
}

model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Role      Role     @relation(fields: [roleId], references: [id])
}

model User {
  id                 Int               @id @default(autoincrement())
  email              String            @unique
  name               String?
  password           String
  isVerified         Boolean           @default(false)
  disabled           Boolean           @default(false)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  UserTokens         UserToken[]
  UserRoles          UserRole[]
  PasswordReset      PasswordReset[]
  userVerificationId String?           @unique
  UserVerification   UserVerification? @relation(fields: [userVerificationId], references: [id])

  @@index([email, disabled])
}

model UserVerification {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?

  @@index([token])
}

model UserToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  disabled  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])

  @@index([token])
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    Int
  disabled  Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
}
