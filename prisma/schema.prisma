generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]

  @@index([name])
}

enum InviteType {
  ADMIN
  HOSPITAL
  DOCTOR
  STAFF
}

model UserInvite {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  token     String
  userId    Int?
  type      InviteType
  active    Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  User User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email, token, active])
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  name       String
  password   String
  roleId     Int      @default(1)
  isVerified Boolean  @default(false)
  disabled   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Role Role @relation(fields: [roleId], references: [id])

  UserTokens            UserToken[]
  PasswordReset         PasswordReset[]
  Organization          Organization?
  OrganizationDocuments OrganizationDocuments[]
  OrganizationMember    OrganizationMember? // ADDED
  UserInvite            UserInvite[]
  UserVerifications     UserVerification[]
  UserOTP               UserOTP[]
  AuditLog              AuditLog[]

  @@index([email, disabled])
}

model UserVerification {
  id        String   @id @default(cuid())
  token     String
  userId    Int
  disabled  Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}

model UserToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  disabled  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])

  @@index([token])
}

model UserOTP {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    Int
  disabled  Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  disabled  Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
}

enum FieldType {
  TEXT
  NUMBER
  DATE
  FILE
}

model FileType {
  id                    Int                     @id @default(autoincrement())
  name                  String
  countryId             Int
  fieldType             FieldType               @default(FILE)
  isRequired            Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  country               Country                 @relation(fields: [countryId], references: [id], onDelete: Cascade)
  OrganizationDocuments OrganizationDocuments[]

  @@unique([name, countryId])
}

model Country {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  code                  String                  @unique
  extension             String
  currency              String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  FileTypes             FileType[]
  OrganizationCountries OrganizationCountry[]
  OrganizationDocuments OrganizationDocuments[]

  @@index([name])
  @@index([code])
}

enum OrganizationType {
  INDIVIDUAL
  HOSPITAL
}

enum OrganizationVerificationStatus {
  DRAFT
  PENDING
  FINAL_REVIEW
  VERIFIED
  REJECTED
}

model Organization {
  id                 Int              @id @default(autoincrement())
  name               String
  address            String
  placeId            String           @unique
  latitude           Float
  longitude          Float
  userId             Int              @unique
  customFields       Json?
  verificationStatus String           @default("DRAFT")
  type               OrganizationType @default(INDIVIDUAL)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  User                  User                    @relation(fields: [userId], references: [id])
  OrganizationDocuments OrganizationDocuments[]
  OrganizationCountry   OrganizationCountry?
  OrganizationMembers   OrganizationMember[] // ADDED

  @@index([name])
}

model OrganizationCountry {
  id             Int          @id @default(autoincrement())
  organizationId Int          @unique
  countryId      Int          @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Country        Country      @relation(fields: [countryId], references: [id], onDelete: Cascade)
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, countryId])
  @@index([countryId])
}

enum DocumentType {
  LICENSE
  CERTIFICATE
  OTHER
}

model OrganizationDocuments {
  id             Int          @id @default(autoincrement())
  url            String
  originalName   String?
  isVerified     Boolean      @default(false)
  fileTypeId     Int
  organizationId Int
  uploadedBy     Int
  countryId      Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Country        Country      @relation(fields: [countryId], references: [id], onDelete: Cascade)
  FileType       FileType     @relation(fields: [fileTypeId], references: [id], onDelete: Cascade)
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  User           User         @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([organizationId, countryId])
  @@index([fileTypeId, organizationId])
}

enum OrganizationMemberRole {
  OWNER
  ADMIN
  DOCTOR
  STAFF
  VIEWER
}

model OrganizationMember {
  id             Int                    @id @default(autoincrement())
  organizationId Int
  userId         Int                    @unique
  role           OrganizationMemberRole @default(STAFF)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  Organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  User         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId, role])
  @@index([userId])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  entity    String
  entityId  String
  changes   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, entity])
}
